package lectorcom;

import com.fazecast.jSerialComm.SerialPort;
import com.neovisionaries.ws.client.WebSocket;
import com.neovisionaries.ws.client.WebSocketAdapter;
import com.neovisionaries.ws.client.WebSocketFactory;
import com.neovisionaries.ws.client.WebSocketFrame;
import java.awt.Color;
import java.awt.Desktop;
import java.awt.event.KeyEvent;
import java.io.BufferedReader;
import java.io.DataOutputStream;
import java.io.File;
import java.io.FileInputStream;
import java.io.FileOutputStream;
import java.io.InputStreamReader;
import java.net.Socket;
import java.net.URI;
import java.net.URISyntaxException;
import java.nio.charset.StandardCharsets;
import java.security.KeyStore;
import java.time.LocalDateTime;
import java.time.format.DateTimeFormatter;
import java.util.Arrays;
import java.util.List;
import java.util.Map;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.net.ssl.KeyManagerFactory;
import javax.net.ssl.SSLContext;
import javax.net.ssl.TrustManagerFactory;
import javax.swing.ImageIcon;
import javax.swing.JFrame;
import javax.swing.JOptionPane;
import javax.swing.JTextField;
import org.apache.commons.lang3.ArrayUtils;
import org.apache.commons.lang3.StringUtils;
import org.apache.poi.ss.usermodel.CellStyle;
import org.apache.poi.ss.usermodel.DataFormat;
import org.apache.poi.ss.usermodel.Font;
import org.apache.poi.ss.usermodel.WorkbookFactory;
import org.apache.poi.xssf.usermodel.XSSFCell;
import org.apache.poi.xssf.usermodel.XSSFRow;
import org.apache.poi.xssf.usermodel.XSSFSheet;
import org.apache.poi.xssf.usermodel.XSSFWorkbook;
import org.jvnet.substance.SubstanceLookAndFeel;
import db.Crudsql;


public class JFramePrincipal extends javax.swing.JFrame {
    
    public boolean leyendo = true;
    public boolean leyendoRemote = true;
    DateTimeFormatter formatter = DateTimeFormatter.ofPattern("yyyy-MM-dd HH:mm:ss.SSS");
    private Long contadorCOM = 0L;
    private Long contadorRemote = 0L;
    private final Integer MILES = 100000;
    private WebSocket webSocket;
    //private final String URL_WEBSOCKET = "wss://localhost:8081";
    private final String URL_WEBSOCKET = "wss://petcomapi-env-1.eba-vqn3bdgx.us-east-1.elasticbeanstalk.com:8081";
    private final List<String> COMMAND_DATA = Arrays.asList("2", "7", "8");
    private final List<String> COMMAND_FUNCTIONS = Arrays.asList("0", "1", "2", "7", "8", "9");
    private String functionSlect = "";
    private SerialPort portSelect;
    private String command;
    private String URL_WEB = "http://petcom-front.s3-website-us-east-1.amazonaws.com/#/table-list-cliente"; 
    static Crudsql RegistroBD= new Crudsql(); 
    
    /**
     * Creates new form JFramePrincipal
     */
    public JFramePrincipal() {
        initComponents();
        this.setLocationRelativeTo(null);
        this.setIconImage(new ImageIcon(getClass().getResource("/imagenes/densa.jpg")).getImage());

        this.configSelect();
        
        new Thread(() -> {
            connectWebScoket();
        }).start();
       }
            
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        tabPetcom = new javax.swing.JTabbedPane();
        jPanel2 = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        txtAreaDatosRemote = new javax.swing.JTextArea();
        jPanel4 = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        txtIP = new javax.swing.JTextField();
        jLabel2 = new javax.swing.JLabel();
        txtPort = new javax.swing.JTextField();
        btnConectarRemote = new javax.swing.JButton();
        btnDesconectarRemote = new javax.swing.JButton();
        btnLimpiarRemote = new javax.swing.JButton();
        jScrollPane3 = new javax.swing.JScrollPane();
        txtAreaDatos = new javax.swing.JTextArea();
        jPanel1 = new javax.swing.JPanel();
        cmbCOM = new javax.swing.JComboBox<>();
        jLabel4 = new javax.swing.JLabel();
        cmbBaudRate = new javax.swing.JComboBox<>();
        jLabel5 = new javax.swing.JLabel();
        cmbDataBits = new javax.swing.JComboBox<>();
        jLabel6 = new javax.swing.JLabel();
        btnConectar = new javax.swing.JButton();
        btnLimpiar = new javax.swing.JButton();
        btnDesconectar = new javax.swing.JButton();
        btnWeb = new javax.swing.JButton();
        jLabel7 = new javax.swing.JLabel();
        labPromedioRemote = new javax.swing.JLabel();
        labPromedioCOM = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        labLed = new javax.swing.JLabel();
        jScrollPane2 = new javax.swing.JScrollPane();
        txtAreaOnline = new javax.swing.JTextArea();
        labRouter = new javax.swing.JLabel();
        txtRouter = new javax.swing.JTextField();
        txtRTU = new javax.swing.JTextField();
        labDatos = new javax.swing.JLabel();
        jLabel12 = new javax.swing.JLabel();
        labRTU = new javax.swing.JLabel();
        cmbFunction = new javax.swing.JComboBox<>();
        txtData = new javax.swing.JTextField();
        btnSend = new javax.swing.JButton();
        cmbTargetComand = new javax.swing.JComboBox<>();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("PeTCom");
        getContentPane().setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        txtAreaDatosRemote.setEditable(false);
        txtAreaDatosRemote.setColumns(20);
        txtAreaDatosRemote.setFont(new java.awt.Font("Arial", 0, 10)); // NOI18N
        txtAreaDatosRemote.setLineWrap(true);
        txtAreaDatosRemote.setRows(5);
        txtAreaDatosRemote.setBorder(javax.swing.BorderFactory.createTitledBorder("Remote"));
        jScrollPane1.setViewportView(txtAreaDatosRemote);

        jPanel4.setBorder(javax.swing.BorderFactory.createTitledBorder(javax.swing.BorderFactory.createEtchedBorder(), "Server remote"));
        jPanel4.setToolTipText("");

        jLabel1.setText("IP:");

        txtIP.setText("192.168.16.254");

        jLabel2.setText("Port:");

        txtPort.setText("8080");

        btnConectarRemote.setText("SCAN");
        btnConectarRemote.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnConectarRemoteActionPerformed(evt);
            }
        });

        btnDesconectarRemote.setText("SCAN OFF");
        btnDesconectarRemote.setEnabled(false);
        btnDesconectarRemote.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnDesconectarRemoteActionPerformed(evt);
            }
        });

        btnLimpiarRemote.setText("CLEAN");
        btnLimpiarRemote.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnLimpiarRemoteActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel4Layout = new javax.swing.GroupLayout(jPanel4);
        jPanel4.setLayout(jPanel4Layout);
        jPanel4Layout.setHorizontalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel4Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(txtIP, javax.swing.GroupLayout.PREFERRED_SIZE, 120, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel1)
                    .addComponent(jLabel2)
                    .addComponent(txtPort, javax.swing.GroupLayout.PREFERRED_SIZE, 60, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btnConectarRemote, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(btnDesconectarRemote, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(btnLimpiarRemote, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        jPanel4Layout.setVerticalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel4Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel1)
                .addGap(6, 6, 6)
                .addComponent(txtIP, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLabel2)
                .addGap(9, 9, 9)
                .addComponent(txtPort, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 22, Short.MAX_VALUE)
                .addComponent(btnConectarRemote, javax.swing.GroupLayout.PREFERRED_SIZE, 37, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(btnDesconectarRemote, javax.swing.GroupLayout.PREFERRED_SIZE, 37, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(btnLimpiarRemote, javax.swing.GroupLayout.PREFERRED_SIZE, 37, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );

        txtAreaDatos.setEditable(false);
        txtAreaDatos.setColumns(20);
        txtAreaDatos.setFont(new java.awt.Font("Arial", 0, 10)); // NOI18N
        txtAreaDatos.setLineWrap(true);
        txtAreaDatos.setRows(5);
        txtAreaDatos.setBorder(javax.swing.BorderFactory.createTitledBorder("COM"));
        jScrollPane3.setViewportView(txtAreaDatos);

        jPanel1.setBorder(javax.swing.BorderFactory.createTitledBorder(javax.swing.BorderFactory.createEtchedBorder(), "COM Settings"));

        jLabel4.setText("COM:");

        cmbBaudRate.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "600", "1200", "2400", "4800", "9600", "14400", "19200", "28800", "38400", "56000", "57600", "115200", "128000", "256000" }));
        cmbBaudRate.setSelectedIndex(6);

        jLabel5.setText("Baud rate:");

        cmbDataBits.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "5", "6", "7", "8" }));
        cmbDataBits.setSelectedIndex(3);

        jLabel6.setText("Data bits");

        btnConectar.setText("SCAN");
        btnConectar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnConectarActionPerformed(evt);
            }
        });

        btnLimpiar.setText("CLEAN");
        btnLimpiar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnLimpiarActionPerformed(evt);
            }
        });

        btnDesconectar.setText("SCAN OFF");
        btnDesconectar.setEnabled(false);
        btnDesconectar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnDesconectarActionPerformed(evt);
            }
        });

        btnWeb.setText("VER DATOS");
        btnWeb.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnWebActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel4)
                    .addComponent(jLabel5)
                    .addComponent(jLabel6)
                    .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                        .addComponent(cmbCOM, javax.swing.GroupLayout.Alignment.LEADING, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(cmbDataBits, javax.swing.GroupLayout.Alignment.LEADING, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(cmbBaudRate, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addGap(34, 34, 34))
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(btnLimpiar, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(btnConectar, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(btnDesconectar, javax.swing.GroupLayout.DEFAULT_SIZE, 138, Short.MAX_VALUE)
                    .addComponent(btnWeb, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap())
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(9, 9, 9)
                .addComponent(jLabel4)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(cmbCOM, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jLabel5)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(cmbBaudRate, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jLabel6)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(cmbDataBits, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(btnConectar, javax.swing.GroupLayout.PREFERRED_SIZE, 37, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(btnDesconectar, javax.swing.GroupLayout.PREFERRED_SIZE, 37, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(btnLimpiar, javax.swing.GroupLayout.PREFERRED_SIZE, 37, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(btnWeb, javax.swing.GroupLayout.PREFERRED_SIZE, 37, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );

        jLabel7.setBackground(new java.awt.Color(255, 255, 255));
        jLabel7.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel7.setIcon(new javax.swing.ImageIcon(getClass().getResource("/imagenes/densa.jpg"))); // NOI18N

        labPromedioRemote.setText("Señales entrantes: 0");

        labPromedioCOM.setText("Señales entrantes: 0");

        jLabel3.setText("ONLINE:");

        labLed.setFont(new java.awt.Font("Tahoma", 0, 36)); // NOI18N
        labLed.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        labLed.setText("•");

        txtAreaOnline.setEditable(false);
        txtAreaOnline.setColumns(20);
        txtAreaOnline.setLineWrap(true);
        txtAreaOnline.setRows(4);
        jScrollPane2.setViewportView(txtAreaOnline);

        labRouter.setText("Router");

        txtRouter.setFont(new java.awt.Font("Microsoft Sans Serif", 0, 17)); // NOI18N
        txtRouter.setText("FFFF");
        txtRouter.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                txtRouterKeyReleased(evt);
            }
        });

        txtRTU.setFont(new java.awt.Font("Microsoft Sans Serif", 0, 17)); // NOI18N
        txtRTU.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                txtRTUKeyReleased(evt);
            }
        });

        labDatos.setText("Datos");

        jLabel12.setText("Function");

        labRTU.setText("RTU");

        cmbFunction.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Disable", "Enable", "Load", "Router", "PIN", "Call" }));
        cmbFunction.setToolTipText("");
        cmbFunction.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                cmbFunctionItemStateChanged(evt);
            }
        });

        txtData.setFont(new java.awt.Font("Microsoft Sans Serif", 0, 17)); // NOI18N
        txtData.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                txtDataKeyReleased(evt);
            }
        });

        btnSend.setText("-> Send");
        btnSend.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnSendActionPerformed(evt);
            }
        });

        cmbTargetComand.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "COM", "Server Remote" }));

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addContainerGap()
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel2Layout.createSequentialGroup()
                                .addComponent(jLabel3)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(labLed, javax.swing.GroupLayout.PREFERRED_SIZE, 20, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 145, javax.swing.GroupLayout.PREFERRED_SIZE))))
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(jScrollPane3, javax.swing.GroupLayout.DEFAULT_SIZE, 465, Short.MAX_VALUE)
                            .addComponent(labPromedioCOM, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(labPromedioRemote, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 465, Short.MAX_VALUE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jPanel4, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel2Layout.createSequentialGroup()
                                .addComponent(jLabel7)
                                .addGap(11, 11, 11))))
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addGap(70, 70, 70)
                        .addComponent(jLabel12)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(cmbFunction, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(txtRouter, javax.swing.GroupLayout.PREFERRED_SIZE, 116, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(labRouter))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(labRTU)
                            .addComponent(txtRTU, javax.swing.GroupLayout.PREFERRED_SIZE, 116, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(labDatos)
                            .addGroup(jPanel2Layout.createSequentialGroup()
                                .addComponent(txtData, javax.swing.GroupLayout.PREFERRED_SIZE, 120, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(btnSend)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(cmbTargetComand, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addGap(0, 243, Short.MAX_VALUE))))
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jLabel3)
                    .addComponent(labLed, javax.swing.GroupLayout.PREFERRED_SIZE, 20, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 90, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, Short.MAX_VALUE))
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addComponent(jPanel4, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(4, 4, 4)
                        .addComponent(jLabel7))
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                            .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 515, Short.MAX_VALUE)
                            .addComponent(jScrollPane3))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(labPromedioCOM)
                            .addComponent(labPromedioRemote))))
                .addGap(41, 41, 41)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(labRouter)
                    .addComponent(labDatos)
                    .addComponent(labRTU))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(txtData, javax.swing.GroupLayout.PREFERRED_SIZE, 33, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(txtRTU, javax.swing.GroupLayout.PREFERRED_SIZE, 33, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(txtRouter, javax.swing.GroupLayout.PREFERRED_SIZE, 33, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(btnSend, javax.swing.GroupLayout.PREFERRED_SIZE, 33, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(cmbTargetComand, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(cmbFunction, javax.swing.GroupLayout.PREFERRED_SIZE, 35, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel12))
                .addContainerGap(43, Short.MAX_VALUE))
        );

        tabPetcom.addTab("General", jPanel2);

        getContentPane().add(tabPetcom, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 0, -1, 730));

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void btnSendActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnSendActionPerformed

        try {
            if (cmbTargetComand.getSelectedIndex() == 0) {
                if (cmbCOM.getSelectedIndex() == -1) {
                    JOptionPane.showMessageDialog(null, "Debe seleccionar un puerto COM");
                    return;
                }
                String comand = "AB" + command.trim();
                portSelect.writeBytes(comand.getBytes(), comand.getBytes().length);
            } else {
                if (txtIP.getText().trim().isEmpty() || txtPort.getText().trim().isEmpty()) {
                    JOptionPane.showMessageDialog(null, "Debe ingresar una IP");
                    return;
                }
                String comand = "AB" + command.trim();
                try (Socket socket = new Socket(txtIP.getText().trim(), Integer.parseInt(txtPort.getText().trim()));
                        DataOutputStream out = new DataOutputStream(socket.getOutputStream())) {
                    out.writeBytes(comand);
                }
            }
        } catch (Exception ex) {
            JOptionPane.showMessageDialog(null, "Result: ERROR " +  ex.getMessage());
        } 
       
    }//GEN-LAST:event_btnSendActionPerformed

    private void txtDataKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtDataKeyReleased

        JTextField textField = (JTextField) evt.getSource();
        if (textField.getText().trim().length() < 9) {
            StringBuilder stringBuilder = new StringBuilder();

            String router = txtRouter.getText().trim();
            router = StringUtils.leftPad(router, 4, "0");
            stringBuilder.append(router);

            String RTU = txtRTU.getText().trim();
            RTU = StringUtils.leftPad(RTU, 8, "0");
            stringBuilder.append(RTU);

            String function = textField.getText().trim();
            function = StringUtils.leftPad(function, 8, "0");
            stringBuilder.append(function);

            stringBuilder.append("00000000072");

            String action = StringUtils.leftPad(functionSlect, 1, "0");
            stringBuilder.append(action);

            stringBuilder.append("69");

            command = stringBuilder.toString();
        } else {
            textField.setText(textField.getText().trim().substring(0, textField.getText().length() - 1));
        }
    }//GEN-LAST:event_txtDataKeyReleased

    private void cmbFunctionItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_cmbFunctionItemStateChanged

        int indexFunction = cmbFunction.getSelectedIndex();
        functionSlect = COMMAND_FUNCTIONS.get(indexFunction);

        this.labRouter.setVisible(true);
        this.txtRouter.setVisible(true);
        this.labRTU.setVisible(true);
        this.txtRTU.setVisible(true);
        this.btnSend.setVisible(true);
        this.cmbTargetComand.setVisible(true);

        if (COMMAND_DATA.contains(functionSlect)) {
            this.labDatos.setVisible(true);
            this.txtData.setVisible(true);
        } else {
            this.labDatos.setVisible(false);
            this.txtData.setVisible(false);
        }

        this.txtData.setText("");
        for (int i = 0; i < 8; i++) {
            txtDataKeyReleased(new KeyEvent(txtData, 0, 0, 0, KeyEvent.VK_0, '0'));
        }
    }//GEN-LAST:event_cmbFunctionItemStateChanged

    private void txtRTUKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtRTUKeyReleased

        JTextField textField = (JTextField) evt.getSource();
        if (textField.getText().trim().length() < 9) {
            StringBuilder stringBuilder = new StringBuilder();

            String router = txtRouter.getText().trim();
            router = StringUtils.leftPad(router, 4, "0");
            stringBuilder.append(router);

            String RTU = textField.getText().trim();
            RTU = StringUtils.leftPad(RTU, 8, "0");
            stringBuilder.append(RTU);

            String function = txtData.getText().trim();
            function = StringUtils.leftPad(function, 8, "0");
            stringBuilder.append(function);

            stringBuilder.append("00000000072");

            String action = StringUtils.leftPad(functionSlect, 1, "0");
            stringBuilder.append(action);

            stringBuilder.append("69");

            command = stringBuilder.toString();
        } else {
            textField.setText(textField.getText().trim().substring(0, textField.getText().length() - 1));
        }
    }//GEN-LAST:event_txtRTUKeyReleased

    private void txtRouterKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtRouterKeyReleased

        JTextField textField = (JTextField) evt.getSource();
        if (textField.getText().trim().length() < 5) {
            StringBuilder stringBuilder = new StringBuilder();

            String router = textField.getText().trim();
            router = StringUtils.leftPad(router, 4, "0");
            stringBuilder.append(router);

            String RTU = txtRTU.getText().trim();
            RTU = StringUtils.leftPad(RTU, 8, "0");
            stringBuilder.append(RTU);

            String function = txtData.getText().trim();
            function = StringUtils.leftPad(function, 8, "0");
            stringBuilder.append(function);

            stringBuilder.append("00000000072");

            String action = StringUtils.leftPad(functionSlect, 1, "0");
            stringBuilder.append(action);

            stringBuilder.append("69");

            command = stringBuilder.toString();
        } else {
            textField.setText(textField.getText().trim().substring(0, textField.getText().length() - 1));
        }
    }//GEN-LAST:event_txtRouterKeyReleased

    private void btnDesconectarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnDesconectarActionPerformed

        this.leyendo = false;
        btnConectar.setEnabled(true);
        btnDesconectar.setEnabled(false);
    }//GEN-LAST:event_btnDesconectarActionPerformed

    private void btnLimpiarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnLimpiarActionPerformed

        txtAreaDatos.setText("");
        txtAreaOnline.setText("");
        this.contadorCOM = 0L;
    }//GEN-LAST:event_btnLimpiarActionPerformed

    private void btnConectarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnConectarActionPerformed

        new Thread(() -> {
            conectar();
        }).start();
    }//GEN-LAST:event_btnConectarActionPerformed

    private void btnLimpiarRemoteActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnLimpiarRemoteActionPerformed

        txtAreaDatosRemote.setText("");
        txtAreaOnline.setText("");
        this.contadorRemote = 0L;
        labPromedioRemote.setText("Señales entrantes: "+ this.contadorRemote);
    }//GEN-LAST:event_btnLimpiarRemoteActionPerformed

    private void btnDesconectarRemoteActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnDesconectarRemoteActionPerformed

        this.leyendoRemote = false;
        btnDesconectarRemote.setEnabled(false);
        btnConectarRemote.setEnabled(true);
    }//GEN-LAST:event_btnDesconectarRemoteActionPerformed

    private void btnConectarRemoteActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnConectarRemoteActionPerformed

        new Thread(() -> {
            conectarRemote();
        }).start();
    }//GEN-LAST:event_btnConectarRemoteActionPerformed

    private void btnWebActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnWebActionPerformed
        
        try {
            Desktop.getDesktop().browse(new URI(URL_WEB));
        } catch (Exception ex) {
            JOptionPane.showMessageDialog(null, "No se pudo abrir el link");
        }
    }//GEN-LAST:event_btnWebActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        try {
            JFrame.setDefaultLookAndFeelDecorated(true);
            SubstanceLookAndFeel.setSkin("org.jvnet.substance.skin.RavenSkin");
        } catch (Exception ex) {
            Logger.getLogger(JFramePrincipal.class.getName()).log(Level.SEVERE, null, ex);
        }

        java.awt.EventQueue.invokeLater(() -> {
            new JFramePrincipal().setVisible(true);
        });
        }
                
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnConectar;
    private javax.swing.JButton btnConectarRemote;
    private javax.swing.JButton btnDesconectar;
    private javax.swing.JButton btnDesconectarRemote;
    private javax.swing.JButton btnLimpiar;
    private javax.swing.JButton btnLimpiarRemote;
    private javax.swing.JButton btnSend;
    private javax.swing.JButton btnWeb;
    private javax.swing.JComboBox<String> cmbBaudRate;
    private javax.swing.JComboBox<String> cmbCOM;
    private javax.swing.JComboBox<String> cmbDataBits;
    private javax.swing.JComboBox<String> cmbFunction;
    private javax.swing.JComboBox<String> cmbTargetComand;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel12;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel4;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JLabel labDatos;
    private javax.swing.JLabel labLed;
    private javax.swing.JLabel labPromedioCOM;
    private javax.swing.JLabel labPromedioRemote;
    private javax.swing.JLabel labRTU;
    private javax.swing.JLabel labRouter;
    private javax.swing.JTabbedPane tabPetcom;
    private javax.swing.JTextArea txtAreaDatos;
    private javax.swing.JTextArea txtAreaDatosRemote;
    private javax.swing.JTextArea txtAreaOnline;
    private javax.swing.JTextField txtData;
    private javax.swing.JTextField txtIP;
    private javax.swing.JTextField txtPort;
    private javax.swing.JTextField txtRTU;
    private javax.swing.JTextField txtRouter;
    // End of variables declaration//GEN-END:variables

    private void configSelect() {
        
        SerialPort[] seriales = SerialPort.getCommPorts();
        for (SerialPort serialPort : seriales) {
            cmbCOM.addItem(serialPort.getSystemPortName());
        }
        
        this.labLed.setForeground(Color.RED);
        
        this.labRouter.setVisible(false);
        this.txtRouter.setVisible(false);
        this.labRTU.setVisible(false);
        this.txtRTU.setVisible(false);
        this.labDatos.setVisible(false);
        this.txtData.setVisible(false);
        this.btnSend.setVisible(false);
        this.cmbTargetComand.setVisible(false);
    }

    private void conectar() {
        
        if (cmbCOM.getSelectedIndex() == -1) {
            JOptionPane.showMessageDialog(null, "Debe seleccionar un puerto COM");
            return;
        }
        String COM = cmbCOM.getSelectedItem().toString();
        String baudRate = cmbBaudRate.getSelectedItem().toString();
        String dataBits = cmbDataBits.getSelectedItem().toString();
        
        SerialPort comPort = SerialPort.getCommPort(COM);
        
        comPort.setBaudRate(Integer.parseInt(baudRate));
        comPort.setNumDataBits(Integer.parseInt(dataBits));
        comPort.openPort();
        comPort.setComPortTimeouts(SerialPort.TIMEOUT_READ_SEMI_BLOCKING, 0, 0);
        this.portSelect = comPort;
        try (InputStreamReader in = new InputStreamReader(comPort.getInputStream(), StandardCharsets.UTF_8.name());
                BufferedReader br = new BufferedReader(in)) {
            this.leyendo = true;
            btnConectar.setEnabled(false);
            btnDesconectar.setEnabled(true);
            while (leyendo) {
                String datos = br.readLine().trim().replaceAll("\n", "").replaceAll("\r", "");
                String date = LocalDateTime.now().format(formatter);
                String[] datosSplit = datos.split("-");

                //10-10-555-AB0001-20010001-PVT0318-00000018-370001-M1"
                if (datosSplit.length >= 8) {
                    datosSplit = ArrayUtils.remove(datosSplit, 5);
                    datos = String.join("-", datosSplit);
                    txtAreaDatos.append(String.format("%s> %s\n", date, datos));
                    txtAreaDatos.setCaretPosition(txtAreaDatos.getDocument().getLength());
                    //datosSplit[5] = Long.valueOf(datosSplit[5], 16) + "";
                    //crearExcel(datosSplit, date, "data.xlsx");
                    this.contadorCOM++;
                    labPromedioCOM.setText(String.format("Señales entrantes: %s", this.contadorCOM));
                    RegistroBD.insertar(date, datosSplit[0],datosSplit[1], datosSplit[2], datosSplit[3], datosSplit[4], datosSplit[5], datosSplit[6], datosSplit[7]);
                    // sendText(datosSplit, date);
                    
                    sendText(datosSplit, date);
                    
                }
            }
            btnConectar.setEnabled(true);
            btnDesconectar.setEnabled(false);
        } catch (Exception e) {
            btnConectar.setEnabled(true);
            btnDesconectar.setEnabled(false);
            txtAreaDatos.append("" + e + "\n");
            comPort.closePort();
            try {
                Thread.sleep(3000);
                conectar();
            } catch (InterruptedException ex) {
                Logger.getLogger(JFramePrincipal.class.getName()).log(Level.SEVERE, null, ex);
            }
        }
        comPort.closePort();
    }

    private void conectarRemote() {

        this.leyendoRemote = true;
        btnConectarRemote.setEnabled(false);
        btnDesconectarRemote.setEnabled(true);
         try (Socket socket = new Socket(txtIP.getText().trim(), Integer.parseInt(txtPort.getText().trim()));
                InputStreamReader in = new InputStreamReader(socket.getInputStream(), StandardCharsets.UTF_8.name());
                BufferedReader br = new BufferedReader(in)) {
            while (leyendoRemote) {
                String datos = br.readLine().trim().replaceAll("\n", "").replaceAll("\r", "");
                String date = LocalDateTime.now().format(formatter);
                String[] datosSplit = datos.split("-");

                if (datosSplit.length >= 8) {
                    datosSplit = ArrayUtils.remove(datosSplit, 5);
                    datos = String.join("-", datosSplit);
                    txtAreaDatosRemote.append(String.format("%s> %s\n", date, datos));
                    txtAreaDatosRemote.setCaretPosition(txtAreaDatosRemote.getDocument().getLength());
                    //datosSplit[5] = Long.valueOf(datosSplit[5], 16) + "";
                    //crearExcel(datosSplit, date, "data-remote.xlsx");
                    this.contadorRemote++;
                    labPromedioCOM.setText(String.format("Señales entrantes: %s", this.contadorRemote));
                  RegistroBD.insertar(date, datosSplit[0],datosSplit[1], datosSplit[2], datosSplit[3], datosSplit[4], datosSplit[5], datosSplit[6], datosSplit[7]);
                    //sendText(datosSplit, date);
                }
            }
            btnConectarRemote.setEnabled(true);
            btnDesconectarRemote.setEnabled(false);
        } catch (Exception e) {
            btnConectarRemote.setEnabled(true);
            btnDesconectarRemote.setEnabled(false);
            txtAreaDatosRemote.append("" + e + "\n");
            try {
                Thread.sleep(3000);
                conectarRemote();
            } catch (InterruptedException ex) {
                Logger.getLogger(JFramePrincipal.class.getName()).log(Level.SEVERE, null, ex);
            }
        }
    }

   public void crearExcel(String[] datosSplit, String date, String name) throws Exception {
          
            XSSFWorkbook workbook;
            XSSFSheet sheet;
            if (!new File(name).exists()) {
                workbook = new XSSFWorkbook();
                sheet = workbook.createSheet("Datos");

                String[] headers = new String[]{
                    "FECHA",
                    "ORIGEN",
                    "DESTINO",
                    "MSSI",
                    "ROUTER",
                    "USER",
                    "DATO",
                    "BANDERAS",
                    "CANAL"
                };

                CellStyle headerStyle = workbook.createCellStyle();
                Font font = workbook.createFont();
                font.setBoldweight(Font.BOLDWEIGHT_BOLD);
                headerStyle.setAlignment(CellStyle.ALIGN_CENTER);
                headerStyle.setFont(font);

                XSSFRow headerRow = sheet.createRow(0);
                for (int i = 0; i < headers.length; ++i) {
                    String header = headers[i];
                    XSSFCell cell = headerRow.createCell(i);
                    cell.setCellStyle(headerStyle);
                    cell.setCellValue(header);
                }
            } else {
                workbook = (XSSFWorkbook) WorkbookFactory.create(new FileInputStream(name));
                sheet = workbook.getSheetAt(0);
            }

            XSSFRow dataRow = sheet.createRow(sheet.getLastRowNum() + 1);

            CellStyle cellStyle = workbook.createCellStyle();
            DataFormat fmt = workbook.createDataFormat();
            cellStyle.setAlignment(CellStyle.ALIGN_CENTER);
            cellStyle.setDataFormat(fmt.getFormat("@"));

            XSSFCell cellFecha = dataRow.createCell(0);
            cellFecha.setCellStyle(cellStyle);
            cellFecha.setCellValue(date);

            XSSFCell cellOrigen = dataRow.createCell(1);
            cellOrigen.setCellStyle(cellStyle);
            cellOrigen.setCellValue(datosSplit[0]);

            XSSFCell cellDestino = dataRow.createCell(2);
            cellDestino.setCellStyle(cellStyle);
            cellDestino.setCellValue(datosSplit[1]);

            XSSFCell cellMSSI = dataRow.createCell(3);
            cellMSSI.setCellStyle(cellStyle);
            cellMSSI.setCellValue(datosSplit[2]);

            XSSFCell cellRouter = dataRow.createCell(4);
            cellRouter.setCellStyle(cellStyle);
            cellRouter.setCellValue(datosSplit[3]);

            XSSFCell cellUser = dataRow.createCell(5);
            cellUser.setCellStyle(cellStyle);
            cellUser.setCellValue(datosSplit[4]);

            XSSFCell cellDato = dataRow.createCell(6);
            cellDato.setCellStyle(cellStyle);
            cellDato.setCellValue(datosSplit[5]);

            XSSFCell cellBanderas = dataRow.createCell(7);
            cellBanderas.setCellStyle(cellStyle);
            cellBanderas.setCellValue(datosSplit[6]);

            XSSFCell cellCanales = dataRow.createCell(8);
            cellCanales.setCellStyle(cellStyle);
            cellCanales.setCellValue(datosSplit[7]);

            try (FileOutputStream file = new FileOutputStream(name)) {
                workbook.write(file);
            }
        }
    
    private void connectWebScoket() {
        try
        {
            KeyStore ks = KeyStore.getInstance("JKS");
            ks.load(this.getClass().getClassLoader().getResourceAsStream("certs/websocket-cer.jks"), "petcom".toCharArray());
            KeyManagerFactory kmf = KeyManagerFactory.getInstance("SunX509");
            kmf.init(ks, "petcom".toCharArray());
            TrustManagerFactory tmf = TrustManagerFactory.getInstance("SunX509");
            tmf.init(ks);

            SSLContext sslContext = SSLContext.getInstance("TLS");
            sslContext.init( kmf.getKeyManagers(), tmf.getTrustManagers(), null );
            sslContext.getSocketFactory();
            
            webSocket = new WebSocketFactory()
                    .setVerifyHostname(false)
                    .setSSLContext(sslContext)
                    .setConnectionTimeout(3000)
                    .createSocket(URL_WEBSOCKET)
                    .addProtocol("echo-protocol")
                    .addListener(new WebSocketAdapter() {
                        @Override
                        public void onConnected(WebSocket websocket, Map<String, List<String>> headers) throws Exception {
                            labLed.setForeground(Color.GREEN);
                        }

                        @Override
                        public void onTextMessage(WebSocket websocket, String message) {
                            System.out.println(message);
                        }

                        @Override
                        public void onDisconnected(WebSocket websocket, WebSocketFrame serverCloseFrame, WebSocketFrame clientCloseFrame, boolean closedByServer) throws Exception {
                            labLed.setForeground(Color.RED);
                            txtAreaOnline.setText("Web Socket closed");
                            Thread.sleep(5000);
                            connectWebScoket();
                        }
                    }).connect();
        } catch (Exception e) {
            try {
                txtAreaOnline.setText(e.getMessage());
                Thread.sleep(5000);
                this.connectWebScoket();
            } catch (InterruptedException ex) {
                Logger.getLogger(JFramePrincipal.class.getName()).log(Level.SEVERE, null, ex);
            }
        }
    }

    private void sendText(String[] datosSplit, String date) {
        new Thread(() -> {
            try {
                String datos = String.join("-", datosSplit);
                webSocket.sendText(date + "> " + datos);
                
                if ((this.contadorCOM % this.MILES) == 0) {
                    txtAreaDatos.setText("");
                }
                
                if ((this.contadorRemote % this.MILES) == 0) {
                    txtAreaDatosRemote.setText("");
                }
            } catch (Exception ex) {
                txtAreaOnline.setText(ex.getMessage());
            }
        }).start();
        }
    
}
